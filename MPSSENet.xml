<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPSSENet</name>
    </assembly>
    <members>
        <member name="T:MPSSENet.MPSSE">
            <summary>
            Base class for the libMPSSE wrapper.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE.GetHandle">
            <summary>
            Gets the handle to the current open channel.
            </summary>
            <returns>A pointer to the handle or IntPtr.Zero if the channel has not been opened.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE.FT_WriteGPIO(System.Byte,System.Byte)">
            <summary>
            Writes to the 8 GPIO lines associated with the high byte of the MPSSE channel.
            </summary>
            <param name="direction">Each bit of this byte represents the direction of the 8 respective GPIO lines.</param>
            <param name="value">A byte that represents the output logic state of the 8 respective GPIO lines.</param>
            <returns>FT_STATUS value from FT_WriteGPIO in LibMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE.FT_ReadGPIO(System.Byte@)">
            <summary>
            Reads from the 8 GPIO lines associated with the high byte of the MPSSE channel.
            </summary>
            <param name="value">Pointer to a byte that represents the input logic state of the 8 respective GPIO lines</param>
            <returns>FT_STATUS value from FT_ReadGPIO in LibMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE.InitLibMPSSE">
            <summary>
            Initializes the MPSSE library.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE.CleanupLibMPSSE">
            <summary>
            Cleans up resources used by the  MPSSE library.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE.GetString(System.Byte[])">
            <summary>
            Decodes all the bytes in the specified array to null terminate ASCII string.
            </summary>
            <param name="byteArray">byte array to decoded.</param>
            <returns>An ASCII encoded string.</returns>
        </member>
        <member name="T:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE">
            <summary>
            Type that holds device information for GetDeviceInformation method.
            </summary>
            <remarks>
            Used with I2C_GetChannelInfo and SPI_GetChannelInfo in libMPSSE.DLL.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.Flags">
            <summary>
            Indicates device state.
            </summary>
            <remarks>
            Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.Type">
            <summary>
            Indicates the device type.
            </summary>
            <remarks>
            Can be one of the following: FT_DEVICE_232H, FT_DEVICE_2232H, FT_DEVICE_4232H, or FT_DEVICE_UNKNOWN.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.ID">
            <summary>
            The Vendor ID and Product ID of the device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.LocId">
            <summary>
            The physical location identifier of the device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.SerialNumber">
            <summary>
            The device serial number.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.Description">
            <summary>
            The device description.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE_INFO_NODE.Handle">
            <summary>
            The device handle.
            </summary>
            <remarks>
            This value is not used externally and is provided for information only. If the device is not open, this value is 0.
            </remarks>
        </member>
        <member name="T:MPSSENet.MPSSE.FT_FLAGS">
            <summary>
            Flags that provide information on the FTDI device state
            </summary>
            <remarks>Flag values for I2C_GetChannelInfo and SPI_GetChannelInfo</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_FLAGS.FT_FLAGS_OPENED">
            <summary>
            Indicates that the device is open.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_FLAGS.FT_FLAGS_HISPEED">
            <summary>
            Indicates that the device is enumerated as a hi-speed USB device.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE.FT_STATUS">
            <summary>
            Status return values for FTDI devices.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_OK">
            <summary>
            Status OK.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_INVALID_HANDLE">
            <summary>
            The device handle is invalid.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_DEVICE_NOT_FOUND">
            <summary>
            Device not found.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_DEVICE_NOT_OPENED">
            <summary>
            Device is not open.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_IO_ERROR">
            <summary>
            IO error.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_INSUFFICIENT_RESOURCES">
            <summary>
            Insufficient resources.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_INVALID_PARAMETER">
            <summary>
            A parameter was invalid.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_INVALID_BAUD_RATE">
            <summary>
            The requested baud rate is invalid.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_ERASE">
            <summary>
            Device not opened for erase
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_WRITE">
            <summary>
            Device not opened for write.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_FAILED_TO_WRITE_DEVICE">
            <summary>
            Failed to write to device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_EEPROM_READ_FAILED">
            <summary>
            Failed to read the device EEPROM.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_EEPROM_WRITE_FAILED">
            <summary>
            Failed to write the device EEPROM.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_EEPROM_ERASE_FAILED">
            <summary>
            Failed to erase the device EEPROM.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_EEPROM_NOT_PRESENT">
            <summary>
            An EEPROM is not fitted to the device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_EEPROM_NOT_PROGRAMMED">
            <summary>
            Device EEPROM is blank.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_INVALID_ARGS">
            <summary>
            Invalid arguments.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_STATUS.FT_OTHER_ERROR">
            <summary>
            An other error has occurred.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE.FT_DEVICE">
            <summary>
            FTDI device enumeration.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_BM">
            <summary>
            FT232B or FT245B device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_AM">
            <summary>
            FT8U232AM or FT8U245AM device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_100AX">
            <summary>
            FT8U100AX device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_UNKNOWN">
            <summary>
            Unknown device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_2232">
            <summary>
            FT2232 device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_232R">
            <summary>
            FT232R or FT245R device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_2232H">
            <summary>
            FT2232H device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_4232H">
            <summary>
            FT4232H device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_232H">
            <summary>
            FT232H device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_X_SERIES">
            <summary>
            FT X-Series device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_4222H_0">
            <summary>
            FT4222 hi-speed device Mode 0 - 2 interfaces.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_4222H_1_2">
            <summary>
            FT4222 hi-speed device Mode 1 or 2 - 4 interfaces.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_4222H_3">
            <summary>
            FT4222 hi-speed device Mode 3 - 1 interface
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE.FT_DEVICE.FT_DEVICE_4222_PROG">
            <summary>
            OTP programmer board for the FT4222.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_API">
            <summary>
            libMPSSE DLL API.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE">
            <summary>
            Native type that holds information for the device.
            </summary>
            <remarks>
            Used with FT_GetDeviceInfoList in FTD2XX.DLL.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.Flags">
            <summary>
            Indicates device state.
            </summary>
            <remarks>
            Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.Type">
            <summary>
            Indicates the device type.
            </summary>
            <remarks>
            Can be one of the following: FT_DEVICE_232R, FT_DEVICE_2232C, FT_DEVICE_BM, FT_DEVICE_AM, FT_DEVICE_100AX or FT_DEVICE_UNKNOWN.
            </remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.ID">
            <summary>
            The Vendor ID and Product ID of the device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.LocId">
            <summary>
            The physical location identifier of the device.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.SerialNumber">
            <summary>
            The device serial number.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.Description">
            <summary>
            The device description.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.FT_DEVICE_LIST_INFO_NODE.Handle">
            <summary>
            The device handle.
            </summary>
            <remarks>
            If the device is not open, this value is 0.
            </remarks>
        </member>
        <member name="T:MPSSENet.MPSSE_API.I2C_CHANNEL_CONFIG">
            <summary>
            Structure that holds the parameters used for initializing a I2C channel.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.I2C_CHANNEL_CONFIG.ClockRate">
            <summary>
            I2C clock rate. Can be one of the standard clock rates or pass a non-standard value directly.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.I2C_CHANNEL_CONFIG.LatencyTimer">
            <summary>
            Latency timer value in milliseconds.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.I2C_CHANNEL_CONFIG.ConfigOptions">
            <summary>
            Device config options.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG">
            <summary>
            Structure that holds the parameters used for initializing a SPI channel.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG.ClockRate">
            <summary>
            I2C clock rate. Can be one of the standard clock rates or pass a non-standard value directly.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG.LatencyTimer">
            <summary>
            Latency timer value in milliseconds.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG.ConfigOptions">
            <summary>
            Device config options.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG.Pins">
            <summary>
            Specifies the directions and values of the lines associated with the lower byte of the MPSSE channel after SPI_InitChannel and SPI_CloseChannel functions are called.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_API.SPI_CHANNEL_CONFIG.Reserved">
            <summary>
            This parameter is reserved and should not be used.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_GetNumChannels(System.UInt32@)">
            <summary>
            Gets the number of I2C channels that are connected to the host system.
            </summary>
            <param name="numberOfChannels">The number of channels connected to the host.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_GetChannelInfo(System.UInt32,System.IntPtr)">
            <summary>
            Provides information about the channel in the form of a populated FT_DEVICE_LIST_INFO_NODE structure.
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="channelInfo">Pointer to FT_DEVICE_LIST_INFO_NODE structure.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_OpenChannel(System.UInt32,System.IntPtr@)">
            <summary>
            Opens the indexed channel and provides a handle to it.
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="handle">Pointer to a variable of type FT_HANDLE (IntPtr) where the handle will be stored.</param>
            <returns> Returns status code of type FT_STATUS </returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_InitChannel(System.IntPtr,System.IntPtr)">
            <summary>
             Initializes the channel and the communication parameters associated with it. 
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="config">Pointer to ChannelConfig structure.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
            <remarks>ChannelConfig structure contains the values for I2C master clock, latency timer and options.</remarks>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_CloseChannel(System.IntPtr)">
            <summary>
            Closes a channel and frees all resources that were used by it.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_DeviceRead(System.IntPtr,System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Reads the specified number of bytes from an addressed I2C slave. 
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="deviceAddress">Address of the I2C slave.</param>
            <param name="sizeToTransfer">Number of bytes to be read.</param>
            <param name="buffer">Pointer to the buffer where data is to be read.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes read.</param>
            <param name="options">Specifies data transfer options.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.I2C_DeviceWrite(System.IntPtr,System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Writes the specified number of bytes from an addressed I2C slave. 
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="deviceAddress">Address of the I2C slave.</param>
            <param name="sizeToTransfer">Number of bytes to be written.</param>
            <param name="buffer">Pointer to the buffer that holds the data to be written.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes written.</param>
            <param name="options">Specifies data transfer options.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_GetNumChannels(System.UInt32@)">
            <summary>
            Gets the number of SPI channels that are connected to the host system.
            </summary>
            <param name="numberOfChannels">The number of channels connected to the host.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_GetChannelInfo(System.UInt32,System.IntPtr)">
            <summary>
            Provides information about the channel in the form of a populated FT_DEVICE_LIST_INFO_NODE structure.
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="channelInfo">Pointer to FT_DEVICE_LIST_INFO_NODE structure.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_OpenChannel(System.UInt32,System.IntPtr@)">
            <summary>
            Opens the indexed channel and provides a handle to it.
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="handle">Pointer to a variable of type FT_HANDLE (IntPtr) where the handle will be stored.</param>
            <returns> Returns status code of type FT_STATUS </returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_InitChannel(System.IntPtr,System.IntPtr)">
            <summary>
             Initializes the channel and the communication parameters associated with it. 
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="config">Pointer to ChannelConfig structure.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
            <remarks>ChannelConfig structure contains the values for SPI master clock, latency timer and options.</remarks>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_CloseChannel(System.IntPtr)">
            <summary>
            Closes a channel and frees all resources that were used by it.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_Read(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Reads the specified number of bits or bytes (depending on transferOptions parameter) from an SPI slave. 
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="buffer">Pointer to the buffer where data is to be read.</param>
            /// <param name="sizeToTransfer">Number of bytes or bits to be read.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes or bits read.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_Write(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            writes the specified number of bits or bytes (depending on transferOptions parameter) to a SPI slave.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="buffer">Pointer to the buffer that holds the data to be written.</param>
            /// <param name="sizeToTransfer">Number of bytes or bits to be written.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes or bits written.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_ReadWrite(System.IntPtr,System.Byte[],System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Reads from and writes to the SPI slave simultaneously.
            </summary>
            <param name="handle">Handle of the channel</param>
            <param name="inBuffer">Pointer to buffer to which data read will be stored.</param>
            <param name="ontBuffer">Pointer to the buffer from where data is to be written.</param>
            <param name="sizeToTransfer">Number of bytes or bits to write.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes or bits written.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_IsBusy(System.IntPtr,System.Boolean@)">
            <summary>
            Reads the state of the MISO line without clocking the SPI bus.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="state">Pointer to a variable which hold the state of the MISO line.</param>
            <returns>Returns status code of type FT_STATUS</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.SPI_ChangeCS(System.IntPtr,System.UInt32)">
            <summary>
            Change the chip select line that is to be used to communicate to the SPI slave.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="configOption">Config option as per Channel Config.</param>
            <returns>Returns status code of type FT_STATUS</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.FT_WriteGPIO(System.IntPtr,System.Byte,System.Byte)">
            <summary>
             Writes to the 8 GPIO lines associated with the high byte of the MPSSE channel.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="direction">Each bit of this byte represents the direction of the 8 respective GPIO lines. 0 for in and 1 for out.</param>
            <param name="value">If the GPIO line is set to output, then each bit of this byte represent the output logic state of the 8 respective GPIO lines</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.FT_ReadGPIO(System.IntPtr,System.Byte@)">
            <summary>
            Reads from the 8 GPIO lines associated with the high byte of the MPSSE channel.
            </summary>
            <param name="handle">Handle of the channel.</param>
            <param name="value">If the GPIO line is set to input, then each bit of this byte represent the input logic state of the 8 respective GPIO lines.</param>
            <returns>Returns status code of type FT_STATUS.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_API.Init_libMPSSE">
            <summary>
            Initializes the library.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_API.Cleanup_libMPSSE">
            <summary>
            Cleans up resources used by the library.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_I2C">
            <summary>
            Wrapper class for libMPSSE - I2C.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.#ctor">
            <summary>
            Constructor for the MPSSE I2C Class.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_GetNumChannels(System.UInt32@)">
            <summary>
            Gets the number of channels connected to the host system that can be configured as an I2C master.
            </summary>
            <param name="numberOfChannels">Pointer to unsigned int to stores the number of channels.</param>
            <returns>FT_STATUS value from I2C_GetNumChannels in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_GetChannelInfo(System.UInt32,MPSSENet.MPSSE.FT_DEVICE_INFO_NODE)">
            <summary>
            Provides information about the channel referenced by index..
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="deviceInfo">Type class FT_DEVICE_INFO_NODE that contains the device information.</param>
            <returns>FT_STATUS value from I2C_GetChannelInfo in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_OpenChannel(System.UInt32)">
            <summary>
            Opens the indexed channel and provides a handle to it.
            </summary>
            <param name="index">Index of the device to open.</param>
            <returns>FT_STATUS value from I2C_OpenChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_InitChannel(MPSSENet.MPSSE_I2C.ChannelConfig)">
            <summary>
            Initializes the I2C channel and the communication parameters associated with it.
            </summary>
            <param name="channelConfig">Type class holding the channel configuration data</param>
            <returns>FT_STATUS value from I2C_InitChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_CloseChannel">
            <summary>
            Closes the channel.
            </summary>
            <returns>FT_STATUS value from I2C_CloseChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_DeviceRead(System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Reads the specified number of bytes from an addressed I2C slave.
            </summary>
            <param name="deviceAddress">Address of the I2C slave.</param>
            <param name="sizeToTransfer">Number of bytes to be read.</param>
            <param name="dataBuffer">Pointer to the buffer where data is to be read.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes read.</param>
            <param name="options">Specifies data transfer options.</param>
            <returns>FT_STATUS value from I2C_DeviceRead in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_I2C.I2C_DeviceWrite(System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Writes the specified number of bytes to an addressed I2C slave.
            </summary>
            <param name="deviceAddress">Address of the I2C slave.</param>
            <param name="sizeToTransfer">Number of bytes to be written</param>
            <param name="dataBuffer">Pointer to the buffer where data is to be written.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes written.</param>
            <param name="options">Specifies data transfer options.</param>
            <returns>FT_STATUS value from I2C_DeviceWrite in libMPSSE.DLL</returns>
        </member>
        <member name="T:MPSSENet.MPSSE_I2C.ChannelConfig">
            <summary>
            Type class that holds the parameters used for initializing a channel.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ChannelConfig.ClockRate">
            <summary>
            Device clock rate.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ChannelConfig.LatencyTimer">
            <summary>
            Latency timer in milliseconds.
            </summary>
            <remarks>FT2232D 2 - 255 milliseconds, 1 - 255 milliseconds for others</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ChannelConfig.ConfigOptions">
            <summary>
            Configuration options.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_I2C.ClockRate">
            <summary>
            I2C standard clockrates.
            </summary>
            <remarks>Alternatively a value for a non-standard clock rate may be passed directly.</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ClockRate.I2C_CLOCK_STANDARD_MODE">
            <summary>
            Standard clock mode - 100KHz.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ClockRate.I2C_CLOCK_FAST_MODE">
            <summary>
            Fast clock mode - 400KHz.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ClockRate.I2C_CLOCK_FAST_MODE_PLUS">
            <summary>
            Fast plus clock mode - 1Mhz.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ClockRate.I2C_CLOCK_HIGH_SPEED_MODE">
            <summary>
            High seed clock mode - 3.4MHz
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_I2C.ConfigOptions">
            <summary>
            Configuration option flags.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ConfigOptions.I2C_DISABLE_3PHASE_CLOCKING">
            <summary>
            Bit 0 set disables 3 Phase Clocking.
            </summary>
            <remarks>Only availabel for Hi-speed devices (FT232H, FT2232H, FT4232H).</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.ConfigOptions.I2C_ENABLE_DRIVE_ONLY_ZERO">
            <summary>
            Bit 1 set enables Drive Only Zero.
            </summary>
            <remarks>Available only in a FT232H device.</remarks>
        </member>
        <member name="T:MPSSENet.MPSSE_I2C.TransferOptions">
            <summary>
            I2C device transfer option flags.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_START_BIT">
            <summary>
            If set then a start condition is generated in the I2C bus before the transfer begins.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_STOP_BIT">
            <summary>
            If set then a stop condition is generated in the I2C bus after the transfer ends.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_BREAK_ON_NACK">
            <summary>
            If set then the function will return when a device nAcks after a byte has been transferred. (Write Option)
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_NACK_LAST_BYTE">
            <summary>
            If set generates a NAK for the last data byte read. (Read Option)
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_FAST_TRANSFER_BYTES">
            <summary>
            Setting this bit will invoke a multi byte I2C transfer.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_FAST_TRANSFER_BITS">
            <summary>
            Setting this bit would invoke a multi bit transfer.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_I2C.TransferOptions.I2C_TRANSFER_OPTIONS_NO_ADDRESS">
            <summary>
            The device address parameter is ignored if this bit is set.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_SPI">
            <summary>
            Wrapper class for libMPSSE - SPI.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.#ctor">
            <summary>
            Constructor for MPSEE SPI Class.
            </summary>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_GetNumChannels(System.UInt32@)">
            <summary>
            Gets the number of channels connected to the host system that can be configured as an SPI master.
            </summary>
            <param name="numberOfChannels">Pointer to unsigned int to stores the number of channels.</param>
            <returns>FT_STATUS value from SPI_GetNumChannels in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_GetChannelInfo(System.UInt32,MPSSENet.MPSSE.FT_DEVICE_INFO_NODE)">
            <summary>
            Provides information about the channel referenced by index..
            </summary>
            <param name="index">Index of the channel.</param>
            <param name="deviceInfo">Type class FT_DEVICE_INFO_NODE that contains the device information.</param>
            <returns>FT_STATUS value from SPI_GetChannelInfo in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_OpenChannel(System.UInt32)">
            <summary>
            Opens the indexed channel and provides a handle to it.
            </summary>
            <param name="index">Index of the device to open.</param>
            <returns>FT_STATUS value from SPI_OpenChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_InitChannel(MPSSENet.MPSSE_SPI.ChannelConfig)">
            <summary>
            Initializes the SPI channel and the communication parameters associated with it.
            </summary>
            <param name="channelConfig">Type class holding the channel configuration data</param>
            <returns>FT_STATUS value from SPI_InitChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_CloseChannel">
            <summary>
            Closes the channel.
            </summary>
            <returns>FT_STATUS value from SPI_CloseChannel in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_Read(System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Reads the specified number of bits or bytes (depending on transferOptions parameter) from an SPI slave.
            </summary>
            <param name="dataBuffer">Pointer to the buffer where data is to be read.</param>
            <param name="sizeToTransfer">Number of bytes to be read.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes read.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>FT_STATUS value from SPI_Read in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_Write(System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Writes the specified number of bits or bytes (depending on transferOptions parameter) to a SPI slave.
            </summary>
            <param name="dataBuffer">Pointer to the buffer that holds the data to be written.</param>
            <param name="sizeToTransfer">Number of bytes to be written</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes written.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>FT_STATUS value from SPI_Write in libMPSSE.DLL.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_ReadWrite(System.Byte[],System.Byte[],System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            Reads from and writes to the SPI slave simultaneously.
            </summary>
            <param name="inBuffer">Pointer to buffer to which data read will be stored</param>
            <param name="outBuffer">Pointer to the buffer that holds the data to be written.</param>
            <param name="sizeToTransfer">Number of bytes or bits to write.</param>
            <param name="sizeTransfered">Pointer to variable containing the number of bytes or bits written.</param>
            <param name="transferOptions">Specifies data transfer options.</param>
            <returns>FT_STATUS value from SPIReadWrite in libMPSSE.DLL.</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_IsBusy(System.Boolean@)">
            <summary>
            Reads the state of the MISO line without clocking the SPI bus.
            </summary>
            <param name="state">Pointer to a variable which hold the state of the MISO line.</param>
            <returns>FT_STATUS value from SPI_IsBusy in libMPSSE.DLL</returns>
        </member>
        <member name="M:MPSSENet.MPSSE_SPI.SPI_ChangeCS(System.UInt32)">
            <summary>
            Changes the chip select line that is to be used to communicate to the SPI slave.
            </summary>
            <param name="configOption">Provides a way to select the chip select line and the slave's SPI mode</param>
            <returns>FT_STATUS value from SPI_ChangeCS in libMPSSE.DLL</returns>
        </member>
        <member name="T:MPSSENet.MPSSE_SPI.ChannelConfig">
            <summary>
            Type class that holds the parameters used for initializing a channel.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ChannelConfig.ClockRate">
            <summary>
            Value of the clock rate of the SPI bus in hertz.
            </summary>
            <remarks>Valid range for ClockRate is 0 to 30MHz.</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ChannelConfig.LatencyTimer">
            <summary>
            Latency timer in millseconds.
            </summary>
             <remarks>FT2232D 2 - 255 milliseconds, 1 - 255 milliseconds for others</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ChannelConfig.ConfigOptions">
            <summary>
            Configuration options.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ChannelConfig.Pins">
            <summary>
            Specifies the directions and values of the lines associated with the lower byte of the MPSSE channel after SPI_InitChannel and SPI_CloseChannel functions are called.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ChannelConfig.Reserved">
            <summary>
            This parameter is reserved and should not be used.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_SPI.ConfigOptions">
            <summary>
            Config options.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_MODE0">
            <summary>
            SPI MODE0.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_MODE1">
            <summary>
            SPI MODE1.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_MODE2">
            <summary>
            SPI MODE1.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_MODE3">
            <summary>
            SPI MODE1.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_DBUS3">
            <summary>
            xDBUS3 of MPSSE is chip select.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_DBUS4">
            <summary>
            xDBUS4 of MPSSE is chip select.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_DBUS5">
            <summary>
            xDBUS5 of MPSSE is chip select.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_DBUS6">
            <summary>
            xDBUS6 of MPSSE is chip select.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_DBUS7">
            <summary>
            xDBUS7 of MPSSE is chip select.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.ConfigOptions.SPI_CONFIG_OPTION_CS_ACTIVELOW">
            <summary>
            Chip select is active low.
            </summary>
        </member>
        <member name="T:MPSSENet.MPSSE_SPI.TransferOptions">
            <summary>
            Transfer option for SPI read, write and read/write operations.
            </summary>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.TransferOptions.SPI_TRANSFER_OPTIONS_SIZE_IN_BYTES">
            <summary>
            Transfer size in bits.
            </summary>
            <remarks>Bit 0 reset.</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.TransferOptions.SPI_TRANSFER_OPTIONS_SIZE_IN_BITS">
            <summary>
            Transfer size in bytes.
            </summary>
            <remarks>Bit 0 set.</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.TransferOptions.SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE">
            <summary>
            Chip select line is asserted before beginning the transfer.
            </summary>
            <remarks>Bit1 set.</remarks>
        </member>
        <member name="F:MPSSENet.MPSSE_SPI.TransferOptions.SPI_TRANSFER_OPTIONS_CHIPSELECT_DISABLE">
            <summary>
            Chip select line is disserted after the transfer ends.
            </summary>
            <remarks>Bit 2 set.</remarks>
        </member>
    </members>
</doc>
